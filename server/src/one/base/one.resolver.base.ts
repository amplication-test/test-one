/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateOneArgs } from "./CreateOneArgs";
import { UpdateOneArgs } from "./UpdateOneArgs";
import { DeleteOneArgs } from "./DeleteOneArgs";
import { OneFindManyArgs } from "./OneFindManyArgs";
import { OneFindUniqueArgs } from "./OneFindUniqueArgs";
import { One } from "./One";
import { Many } from "../../many/base/Many";
import { OneService } from "../one.service";

@graphql.Resolver(() => One)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class OneResolverBase {
  constructor(
    protected readonly service: OneService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "One",
    action: "read",
    possession: "any",
  })
  async _onesMeta(
    @graphql.Args() args: OneFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [One])
  @nestAccessControl.UseRoles({
    resource: "One",
    action: "read",
    possession: "any",
  })
  async ones(@graphql.Args() args: OneFindManyArgs): Promise<One[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => One, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "One",
    action: "read",
    possession: "own",
  })
  async one(@graphql.Args() args: OneFindUniqueArgs): Promise<One | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => One)
  @nestAccessControl.UseRoles({
    resource: "One",
    action: "create",
    possession: "any",
  })
  async createOne(@graphql.Args() args: CreateOneArgs): Promise<One> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        manyes: args.data.manyes
          ? {
              connect: args.data.manyes,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => One)
  @nestAccessControl.UseRoles({
    resource: "One",
    action: "update",
    possession: "any",
  })
  async updateOne(@graphql.Args() args: UpdateOneArgs): Promise<One | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          manyes: args.data.manyes
            ? {
                connect: args.data.manyes,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => One)
  @nestAccessControl.UseRoles({
    resource: "One",
    action: "delete",
    possession: "any",
  })
  async deleteOne(@graphql.Args() args: DeleteOneArgs): Promise<One | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Many, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Many",
    action: "read",
    possession: "any",
  })
  async manyes(@graphql.Parent() parent: One): Promise<Many | null> {
    const result = await this.service.getManyes(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

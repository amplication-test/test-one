/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateManegerArgs } from "./CreateManegerArgs";
import { UpdateManegerArgs } from "./UpdateManegerArgs";
import { DeleteManegerArgs } from "./DeleteManegerArgs";
import { ManegerFindManyArgs } from "./ManegerFindManyArgs";
import { ManegerFindUniqueArgs } from "./ManegerFindUniqueArgs";
import { Maneger } from "./Maneger";
import { EmployFindManyArgs } from "../../employ/base/EmployFindManyArgs";
import { Employ } from "../../employ/base/Employ";
import { ManegerService } from "../maneger.service";

@graphql.Resolver(() => Maneger)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ManegerResolverBase {
  constructor(
    protected readonly service: ManegerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Maneger",
    action: "read",
    possession: "any",
  })
  async _manegersMeta(
    @graphql.Args() args: ManegerFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Maneger])
  @nestAccessControl.UseRoles({
    resource: "Maneger",
    action: "read",
    possession: "any",
  })
  async manegers(
    @graphql.Args() args: ManegerFindManyArgs
  ): Promise<Maneger[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Maneger, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Maneger",
    action: "read",
    possession: "own",
  })
  async maneger(
    @graphql.Args() args: ManegerFindUniqueArgs
  ): Promise<Maneger | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Maneger)
  @nestAccessControl.UseRoles({
    resource: "Maneger",
    action: "create",
    possession: "any",
  })
  async createManeger(
    @graphql.Args() args: CreateManegerArgs
  ): Promise<Maneger> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Maneger)
  @nestAccessControl.UseRoles({
    resource: "Maneger",
    action: "update",
    possession: "any",
  })
  async updateManeger(
    @graphql.Args() args: UpdateManegerArgs
  ): Promise<Maneger | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Maneger)
  @nestAccessControl.UseRoles({
    resource: "Maneger",
    action: "delete",
    possession: "any",
  })
  async deleteManeger(
    @graphql.Args() args: DeleteManegerArgs
  ): Promise<Maneger | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Employ])
  @nestAccessControl.UseRoles({
    resource: "Employ",
    action: "read",
    possession: "any",
  })
  async emploies(
    @graphql.Parent() parent: Maneger,
    @graphql.Args() args: EmployFindManyArgs
  ): Promise<Employ[]> {
    const results = await this.service.findEmploies(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
